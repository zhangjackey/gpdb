-- turn off autostats so we don't have to worry about the logging of the autostat queries
set gp_autostats_mode = None;
-- create needed tables (in a transaction, for speed)
begin;
create table direct_test
(
  key int NULL,
  value varchar(50) NULL
)
distributed by (key); 
create table direct_test_two_column
(
  key1 int NULL,
  key2 int NULL,
  value varchar(50) NULL
)
distributed by (key1, key2);
create table direct_test_bitmap  as select '2008-02-01'::DATE AS DT,
        case when j <= 996
                then 0
        when j<= 998 then 2
        when j<=999 then 3
        when i%10000 < 9000 then 4
        when i%10000 < 9800 then 5
        when i % 10000 <= 9998 then 5 else 6
        end as ind,
        (i*1017-j)::bigint as s from generate_series(1,10) i, generate_series(1,10) j distributed by (dt);
create index direct_test_bitmap_idx on direct_test_bitmap using bitmap (ind, dt);
CREATE TABLE direct_test_partition (trans_id int, date date, amount decimal(9,2), region text) DISTRIBUTED BY (trans_id) PARTITION BY RANGE (date) (START (date '2008-01-01') INCLUSIVE END (date '2009-01-01') EXCLUSIVE EVERY (INTERVAL '1month') );
NOTICE:  CREATE TABLE will create partition "direct_test_partition_1_prt_1" for table "direct_test_partition"
NOTICE:  CREATE TABLE will create partition "direct_test_partition_1_prt_2" for table "direct_test_partition"
NOTICE:  CREATE TABLE will create partition "direct_test_partition_1_prt_3" for table "direct_test_partition"
NOTICE:  CREATE TABLE will create partition "direct_test_partition_1_prt_4" for table "direct_test_partition"
NOTICE:  CREATE TABLE will create partition "direct_test_partition_1_prt_5" for table "direct_test_partition"
NOTICE:  CREATE TABLE will create partition "direct_test_partition_1_prt_6" for table "direct_test_partition"
NOTICE:  CREATE TABLE will create partition "direct_test_partition_1_prt_7" for table "direct_test_partition"
NOTICE:  CREATE TABLE will create partition "direct_test_partition_1_prt_8" for table "direct_test_partition"
NOTICE:  CREATE TABLE will create partition "direct_test_partition_1_prt_9" for table "direct_test_partition"
NOTICE:  CREATE TABLE will create partition "direct_test_partition_1_prt_10" for table "direct_test_partition"
NOTICE:  CREATE TABLE will create partition "direct_test_partition_1_prt_11" for table "direct_test_partition"
NOTICE:  CREATE TABLE will create partition "direct_test_partition_1_prt_12" for table "direct_test_partition"
create unique index direct_test_uk on direct_test_partition(trans_id);
NOTICE:  building index for child partition "direct_test_partition_1_prt_1"
NOTICE:  building index for child partition "direct_test_partition_1_prt_2"
NOTICE:  building index for child partition "direct_test_partition_1_prt_3"
NOTICE:  building index for child partition "direct_test_partition_1_prt_4"
NOTICE:  building index for child partition "direct_test_partition_1_prt_5"
NOTICE:  building index for child partition "direct_test_partition_1_prt_6"
NOTICE:  building index for child partition "direct_test_partition_1_prt_7"
NOTICE:  building index for child partition "direct_test_partition_1_prt_8"
NOTICE:  building index for child partition "direct_test_partition_1_prt_9"
NOTICE:  building index for child partition "direct_test_partition_1_prt_10"
NOTICE:  building index for child partition "direct_test_partition_1_prt_11"
NOTICE:  building index for child partition "direct_test_partition_1_prt_12"
create table direct_test_range_partition (a int, b int, c int, d int) distributed by (a) partition by range(d) (start(1) end(10) every(1));
NOTICE:  CREATE TABLE will create partition "direct_test_range_partition_1_prt_1" for table "direct_test_range_partition"
NOTICE:  CREATE TABLE will create partition "direct_test_range_partition_1_prt_2" for table "direct_test_range_partition"
NOTICE:  CREATE TABLE will create partition "direct_test_range_partition_1_prt_3" for table "direct_test_range_partition"
NOTICE:  CREATE TABLE will create partition "direct_test_range_partition_1_prt_4" for table "direct_test_range_partition"
NOTICE:  CREATE TABLE will create partition "direct_test_range_partition_1_prt_5" for table "direct_test_range_partition"
NOTICE:  CREATE TABLE will create partition "direct_test_range_partition_1_prt_6" for table "direct_test_range_partition"
NOTICE:  CREATE TABLE will create partition "direct_test_range_partition_1_prt_7" for table "direct_test_range_partition"
NOTICE:  CREATE TABLE will create partition "direct_test_range_partition_1_prt_8" for table "direct_test_range_partition"
NOTICE:  CREATE TABLE will create partition "direct_test_range_partition_1_prt_9" for table "direct_test_range_partition"
insert into direct_test_range_partition select i, i+1, i+2, i+3 from generate_series(1, 2) i;
commit;
-- enable printing of printing info
set test_print_direct_dispatch_info=on;
-- Constant single-row insert, one column in distribution
-- DO direct dispatch
insert into direct_test values (100, 'cow');
INFO:  Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Prepare' to SINGLE content
INFO:  Distributed transaction command 'Distributed Commit Prepared' to SINGLE content
-- verify
select * from direct_test order by key, value;
INFO:  Dispatch command to ALL contents
 key | value 
-----+-------
 100 | cow
(1 row)

-- Constant single-row update, one column in distribution
-- DO direct dispatch
-- Known_opt_diff: MPP-21346
update direct_test set value = 'horse' where key = 100;
INFO:  Dispatch command to ALL contents
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents
-- verify
select * from direct_test order by key, value;
INFO:  Dispatch command to ALL contents
 key | value 
-----+-------
 100 | horse
(1 row)

-- Constant single-row delete, one column in distribution
-- DO direct dispatch
-- Known_opt_diff: MPP-21346
delete from direct_test where key = 100;
INFO:  Dispatch command to ALL contents
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents
-- verify
select * from direct_test order by key, value;
INFO:  Dispatch command to ALL contents
 key | value 
-----+-------
(0 rows)

-- Constant single-row insert, one column in distribution
-- DO direct dispatch
insert into direct_test values (NULL, 'cow');
INFO:  Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Prepare' to SINGLE content
INFO:  Distributed transaction command 'Distributed Commit Prepared' to SINGLE content
-- verify
select * from direct_test order by key, value;
INFO:  Dispatch command to ALL contents
 key | value 
-----+-------
     | cow
(1 row)

-- DELETE with an IS NULL predicate
-- Doesn't do direct dispatch, currently.
delete from direct_test where key is null;
INFO:  Dispatch command to ALL contents
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents
-- Same single-row insert as above, but with DEFAULT instead of an explicit values.
-- DO direct dispatch
insert into direct_test values (default, 'cow');
INFO:  Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Prepare' to SINGLE content
INFO:  Distributed transaction command 'Distributed Commit Prepared' to SINGLE content
-- verify
select * from direct_test order by key, value;
INFO:  Dispatch command to ALL contents
 key | value 
-----+-------
     | cow
(1 row)

-- Constant single-row insert, two columns in distribution
-- DO direct dispatch
-- Known_opt_diff: MPP-21346
insert into direct_test_two_column values (100, 101, 'cow');
INFO:  Dispatch command to ALL contents
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents
-- verify
select * from direct_test_two_column order by key1, key2, value;
INFO:  Dispatch command to ALL contents
 key1 | key2 | value 
------+------+-------
  100 |  101 | cow
(1 row)

-- Constant single-row update, two columns in distribution
-- DO direct dispatch
-- Known_opt_diff: MPP-21346
update direct_test_two_column set value = 'horse' where key1 = 100 and key2 = 101;
INFO:  Dispatch command to ALL contents
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents
-- verify
select * from direct_test_two_column order by key1, key2, value;
INFO:  Dispatch command to ALL contents
 key1 | key2 | value 
------+------+-------
  100 |  101 | horse
(1 row)

-- Constant single-row delete, two columns in distribution
-- DO direct dispatch
delete from direct_test_two_column where key1 = 100 and key2 = 101;
INFO:  Dispatch command to ALL contents
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents
-- verify
select * from direct_test_two_column order by key1, key2, value;
INFO:  Dispatch command to ALL contents
 key1 | key2 | value 
------+------+-------
(0 rows)

-- expression single-row insert
-- DO direct dispatch
insert into direct_test (key, value) values ('123',123123);
INFO:  Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Prepare' to SINGLE content
INFO:  Distributed transaction command 'Distributed Commit Prepared' to SINGLE content
insert into direct_test (key, value) values (sqrt(100*10*10),123123);
INFO:  Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Prepare' to SINGLE content
INFO:  Distributed transaction command 'Distributed Commit Prepared' to SINGLE content
--
-- should get 100 and 123 as the values
--
select * from direct_test where value = '123123' order by key;
INFO:  Dispatch command to ALL contents
 key | value  
-----+--------
 100 | 123123
 123 | 123123
(2 rows)

delete from direct_test where value = '123123';
INFO:  Dispatch command to ALL contents
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents
--------------------------------------------------------------------------------
-- Multiple row update, where clause lists multiple values which hash differently so no direct dispatch
--
-- note that if the hash function for values changes then certain segment configurations may actually 
--                hash all these values to the same content! (and so test would change)
--
update direct_test set value = 'pig' where key in (1,2,3,4,5);
INFO:  Dispatch command to ALL contents
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents
update direct_test_two_column set value = 'pig' where key1 = 100 and key2 in (1,2,3,4);
INFO:  Dispatch command to ALL contents
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents
update direct_test_two_column set value = 'pig' where key1 in (100,101,102,103,104) and key2 in (1);
INFO:  Dispatch command to ALL contents
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents
update direct_test_two_column set value = 'pig' where key1 in (100,101) and key2 in (1,2);
INFO:  Dispatch command to ALL contents
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents
-- Multiple row update, where clause lists values which all hash to same segment
-- DO direct dispatch
-- CAN'T IMPLEMENT THIS TEST BECAUSE THE # of segments changes again (unless we use a # of segments function, and exploit the simple nature of int4 hashing -- can we do that?)
------------------------------
-- Transaction cases
--
-- note that single-row insert can happen BUT DTM will always go to all contents
--
begin;
insert into direct_test values (1,100);
INFO:  Dispatch command to SINGLE content
rollback;
INFO:  Distributed transaction command 'Distributed Abort (No Prepared)' to ALL contents
begin;
insert into direct_test values (1,100);
INFO:  Dispatch command to SINGLE content
insert into direct_test values (2,100);
INFO:  Dispatch command to SINGLE content
insert into direct_test values (3,100);
INFO:  Dispatch command to SINGLE content
rollback;
INFO:  Distributed transaction command 'Distributed Abort (No Prepared)' to ALL contents
-------------------
-- MPP-7634: bitmap index scan
--
-- Known_opt_diff: MPP-21346
select count(*) from direct_test_bitmap where dt='2008-02-05';
INFO:  Dispatch command to ALL contents
 count 
-------
     0
(1 row)

-- Known_opt_diff: MPP-21346
select count(*) from direct_test_bitmap where dt='2008-02-01';
INFO:  Dispatch command to ALL contents
 count 
-------
   100
(1 row)

----------------------------------------------------------------------------------
-- MPP-7637: partitioned table
--
insert into direct_test_partition values (1,'2008-01-02',1,'usa');
INFO:  Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Prepare' to SINGLE content
INFO:  Distributed transaction command 'Distributed Commit Prepared' to SINGLE content
select * from direct_test_partition where trans_id =1;
INFO:  Dispatch command to SINGLE content
 trans_id |    date    | amount | region 
----------+------------+--------+--------
        1 | 01-02-2008 |   1.00 | usa
(1 row)

----------------------------------------------------------------------------------
-- MPP-7638: range table partition
--
-- Known_opt_diff: MPP-21346
select count(*) from direct_test_range_partition where a =1;
INFO:  Dispatch command to ALL contents
 count 
-------
     1
(1 row)

----------------------------------------------------------------------------------
-- Prepared statements
--  do same as above ones but using prepared statements, verify data goes to the right spot
prepare test_insert (int) as insert into direct_test values ($1,100);
execute test_insert(1);
INFO:  Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Prepare' to SINGLE content
INFO:  Distributed transaction command 'Distributed Commit Prepared' to SINGLE content
execute test_insert(2);
INFO:  Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Prepare' to SINGLE content
INFO:  Distributed transaction command 'Distributed Commit Prepared' to SINGLE content
select * from direct_test;
INFO:  Dispatch command to ALL contents
 key | value 
-----+-------
   2 | 100
     | cow
   1 | 100
(3 rows)

prepare test_update (int) as update direct_test set value = 'boo' where key = $1;
-- Known_opt_diff: MPP-21346
execute test_update(2);
INFO:  Dispatch command to ALL contents
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents
select * from direct_test;
INFO:  Dispatch command to ALL contents
 key | value 
-----+-------
     | cow
   1 | 100
   2 | boo
(3 rows)

------------------------
-- A subquery
--
set test_print_direct_dispatch_info=off;
CREATE TEMP TABLE direct_dispatch_foo (id integer) DISTRIBUTED BY (id);
CREATE TEMP TABLE direct_dispatch_bar (id1 integer, id2 integer) DISTRIBUTED by (id1);
INSERT INTO direct_dispatch_foo VALUES (1);
INSERT INTO direct_dispatch_bar VALUES (1, 1);
INSERT INTO direct_dispatch_bar VALUES (2, 2);
INSERT INTO direct_dispatch_bar VALUES (3, 1);
set test_print_direct_dispatch_info=on;
-- Known_opt_diff: MPP-21346
SELECT * FROM direct_dispatch_foo WHERE id IN
    (SELECT id2 FROM (SELECT DISTINCT id1, id2 FROM direct_dispatch_bar WHERE direct_dispatch_bar.id1 = 1) AS s) ORDER BY 1;
INFO:  Dispatch command to ALL contents
INFO:  Dispatch command to ALL contents
 id 
----
  1
(1 row)

--
-- this one will NOT do direct dispatch because it is a many slice query and those are disabled right now
SELECT * FROM direct_dispatch_foo WHERE id IN
    (SELECT id2 FROM (SELECT id1, id2 FROM direct_dispatch_bar WHERE direct_dispatch_bar.id1 = 1 UNION
                      SELECT id1, id2 FROM direct_dispatch_bar WHERE direct_dispatch_bar.id1 = 2) AS s) ORDER BY 1;
INFO:  Dispatch command to ALL contents
INFO:  Dispatch command to ALL contents
 id 
----
  1
(1 row)

-- simple one using an expression on the variable
SELECT * from direct_dispatch_foo WHERE id * id = 1;
INFO:  Dispatch command to ALL contents
 id 
----
  1
(1 row)

SELECT * from direct_dispatch_foo WHERE id * id = 1 OR id = 1;
INFO:  Dispatch command to ALL contents
 id 
----
  1
(1 row)

SELECT * from direct_dispatch_foo where id * id = 1 AND id = 1;
INFO:  Dispatch command to SINGLE content
 id 
----
  1
(1 row)

-- init plan to see how transaction escalation happens
-- Known_opt_diff: MPP-21346
delete from direct_dispatch_foo where id = (select max(id2) from direct_dispatch_bar where id1 = 5);
INFO:  Dispatch command to ALL contents
INFO:  Dispatch command to ALL contents
INFO:  Dispatch command to ALL contents
INFO:  Dispatch command to ALL contents
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents
-- Known_opt_diff: MPP-21346
delete from direct_dispatch_foo where id * id = (select max(id2) from direct_dispatch_bar where id1 = 5) AND id = 3;
INFO:  Dispatch command to ALL contents
INFO:  Dispatch command to ALL contents
INFO:  Dispatch command to ALL contents
INFO:  Dispatch command to ALL contents
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents
-- Known_opt_diff: MPP-21346
delete from direct_dispatch_foo where id * id = (select max(id2) from direct_dispatch_bar) AND id = 3;
INFO:  Dispatch command to ALL contents
INFO:  Dispatch command to ALL contents
INFO:  Dispatch command to ALL contents
INFO:  Dispatch command to ALL contents
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents
-- tests with subplans (MPP-22019)
CREATE TABLE MPP_22019_a ( i INT, j INT) DISTRIBUTED BY (i);
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents
INSERT INTO MPP_22019_a (
 SELECT i, i * i FROM generate_series(1, 10) AS i);
INFO:  Dispatch command to ALL contents
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents
CREATE TABLE MPP_22019_b (i INT, j INT) DISTRIBUTED BY (i);
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents
INSERT INTO MPP_22019_b (SELECT i, i * i FROM generate_series(1, 10) AS i);
INFO:  Dispatch command to ALL contents
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents
EXPLAIN SELECT a.* FROM MPP_22019_a a INNER JOIN MPP_22019_b b ON a.i = b.i WHERE a.j NOT IN (SELECT j FROM MPP_22019_a a2 where a2.j = b.j) and a.i = 1;
                                                   QUERY PLAN                                                    
-----------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice2; segments: 3)  (cost=0.00..1765377.40 rows=1 width=16)
   ->  Result  (cost=0.00..1765377.40 rows=1 width=16)
         ->  Result  (cost=0.00..1765377.40 rows=1 width=16)
               Filter: (subplan)
               ->  Hash Join  (cost=0.00..862.00 rows=1 width=24)
                     Hash Cond: public.mpp_22019_a.i = mpp_22019_b.i
                     ->  Table Scan on mpp_22019_a  (cost=0.00..431.00 rows=1 width=16)
                           Filter: i = 1
                     ->  Hash  (cost=431.00..431.00 rows=1 width=16)
                           ->  Table Scan on mpp_22019_b  (cost=0.00..431.00 rows=1 width=16)
                                 Filter: i = 1
               SubPlan 1
                 ->  Result  (cost=0.00..431.00 rows=1 width=8)
                       Filter: public.mpp_22019_a.j = $1
                       ->  Materialize  (cost=0.00..431.00 rows=1 width=8)
                             ->  Broadcast Motion 3:3  (slice1; segments: 3)  (cost=0.00..431.00 rows=1 width=8)
                                   ->  Table Scan on mpp_22019_a  (cost=0.00..431.00 rows=1 width=8)
 Settings:  optimizer=on
(18 rows)

SELECT a.* FROM MPP_22019_a a INNER JOIN MPP_22019_b b ON a.i = b.i WHERE a.j NOT IN (SELECT j FROM MPP_22019_a a2 where a2.j = b.j) and a.i = 1;
INFO:  Dispatch command to ALL contents
INFO:  Dispatch command to ALL contents
 i | j 
---+---
(0 rows)

SELECT a.* FROM MPP_22019_a a  WHERE a.j NOT IN (SELECT j FROM MPP_22019_a a2 where a2.j = a.j) and a.i = 1;
INFO:  Dispatch command to ALL contents
INFO:  Dispatch command to ALL contents
 i | j 
---+---
(0 rows)

--
-- Test direct dispatch with volatile functions, and nextval().
--
-- Simple table.
create table ddtesttab (i int, j int, k int8) distributed by (k);
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents
create sequence ddtestseq;
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents
insert into ddtesttab values (1, 1, 5);
INFO:  Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Prepare' to SINGLE content
INFO:  Distributed transaction command 'Distributed Commit Prepared' to SINGLE content
insert into ddtesttab values (1, 1, 5 + random()); -- volatile expression as distribution key
INFO:  Dispatch command to ALL contents
INFO:  Dispatch command to ALL contents
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents
insert into ddtesttab values (1, 1, nextval('ddtestseq'));
INFO:  Dispatch command to ALL contents
INFO:  Dispatch command to ALL contents
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents
insert into ddtesttab values (1, 1, 5 + nextval('ddtestseq'));
INFO:  Dispatch command to ALL contents
INFO:  Dispatch command to ALL contents
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents
drop table ddtesttab;
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents
-- Partitioned table, with mixed distribution keys.
create table ddtesttab (i int, j int, k int8) distributed by (i) partition by
range(k)
(start(1) end(20) every(10));
NOTICE:  CREATE TABLE will create partition "ddtesttab_1_prt_1" for table "ddtesttab"
NOTICE:  CREATE TABLE will create partition "ddtesttab_1_prt_2" for table "ddtesttab"
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents
insert into ddtesttab values (1, 1, 5);
INFO:  Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Prepare' to SINGLE content
INFO:  Distributed transaction command 'Distributed Commit Prepared' to SINGLE content
insert into ddtesttab values (1, 1, 5 + random()); -- volatile expression as distribution key
INFO:  Dispatch command to ALL contents
INFO:  Dispatch command to ALL contents
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents
insert into ddtesttab values (1, 1, nextval('ddtestseq'));
INFO:  Dispatch command to ALL contents
INFO:  Dispatch command to ALL contents
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents
insert into ddtesttab values (1, 1, 5 + nextval('ddtestseq'));
INFO:  Dispatch command to ALL contents
INFO:  Dispatch command to ALL contents
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents
-- One partition is randomly distributed, while others are distributed by key.
alter table ddtesttab_1_prt_2 set distributed randomly;
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents
insert into ddtesttab values (1, 1, 5);
INFO:  Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Prepare' to SINGLE content
INFO:  Distributed transaction command 'Distributed Commit Prepared' to SINGLE content
insert into ddtesttab values (1, 1, 5 + random()); -- volatile expression as distribution key
INFO:  Dispatch command to ALL contents
INFO:  Dispatch command to ALL contents
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents
insert into ddtesttab values (1, 1, nextval('ddtestseq'));
INFO:  Dispatch command to ALL contents
INFO:  Dispatch command to ALL contents
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents
insert into ddtesttab values (1, 1, 5 + nextval('ddtestseq'));
INFO:  Dispatch command to ALL contents
INFO:  Dispatch command to ALL contents
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents
drop table ddtesttab;
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents
drop sequence ddtestseq;
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents
-- cleanup
set test_print_direct_dispatch_info=off;
begin;
drop table if exists direct_test;
drop table if exists direct_test_two_column;
drop table if exists direct_test_bitmap;
drop table if exists direct_test_partition;
drop table if exists direct_test_range_partition;
drop table if exists direct_dispatch_foo;
drop table if exists direct_dispatch_bar;
drop table if exists MPP_22019_a;
drop table if exists MPP_22019_b;
commit;

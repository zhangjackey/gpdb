--
-- BOOLEAN
--
create table gpd1 (c1 char(1), c2 numeric, c3 numeric) distributed by (c1);
insert into gpd1 values ('a', 1, 1);
insert into gpd1 values ('a', 1, 2);
insert into gpd1 values ('b', 2, 1);
insert into gpd1 values ('b', 1, 2);
insert into gpd1 values ('c', 3, 2);
insert into gpd1 values ('c', 2, 3);
insert into gpd1 values ('d', 4, 4);
insert into gpd1 values ('d', 4, 3);
--
-- ignore
--
select c1 from gpd1;
 c1 
----
 a
 a
 c
 c
 b
 b
 d
 d
(8 rows)

--
-- order 1, 2
--
select c1, c1, c2, c3 from gpd1 order by 1,2;
 c1 | c1 | c2 | c3 
----+----+----+----
 a  | a  |  1 |  1
 a  | a  |  1 |  2
 b  | b  |  2 |  1
 b  | b  |  1 |  2
 c  | c  |  3 |  2
 c  | c  |  2 |  3
 d  | d  |  4 |  4
 d  | d  |  4 |  3
(8 rows)

--
--
select c1, c1, c2, c3 from gpd1 order by 1,2,3,4; -- order 1, 2     , 3    , 4
 c1 | c1 | c2 | c3 
----+----+----+----
 a  | a  |  1 |  1
 a  | a  |  1 |  2
 b  | b  |  1 |  2
 b  | b  |  2 |  1
 c  | c  |  2 |  3
 c  | c  |  3 |  2
 d  | d  |  4 |  3
 d  | d  |  4 |  4
(8 rows)

--
-- ignore
-- order 1, 2
--
select c1, c1, c2, c3 from gpd1 order by 1,2;
 c1 | c1 | c2 | c3 
----+----+----+----
 a  | a  |  1 |  1
 a  | a  |  1 |  2
 b  | b  |  2 |  1
 b  | b  |  1 |  2
 c  | c  |  3 |  2
 c  | c  |  2 |  3
 d  | d  |  4 |  4
 d  | d  |  4 |  3
(8 rows)

--
--  mvd 2,3->1 ; 2,3->4,5
-- order 4
--
select c1, c2, c3, c1, c1, c2 from gpd1 order by 4;
 c1 | c2 | c3 | c1 | c1 | c2 
----+----+----+----+----+----
 a  |  1 |  1 | a  | a  |  1
 a  |  1 |  2 | a  | a  |  1
 b  |  2 |  1 | b  | b  |  2
 b  |  1 |  2 | b  | b  |  1
 c  |  3 |  2 | c  | c  |  3
 c  |  2 |  3 | c  | c  |  2
 d  |  4 |  4 | d  | d  |  4
 d  |  4 |  3 | d  | d  |  4
(8 rows)

--  Brian: the contents of column 1 are not determined by any other 
--  column -- the column "specifies itself"
--
--  mvd 1->1
--
select row_number() over (), c1, c2, c3 from gpd1;
 row_number | c1 | c2 | c3 
------------+----+----+----
          1 | a  |  1 |  1
          2 | a  |  1 |  2
          3 | c  |  3 |  2
          4 | c  |  2 |  3
          5 | b  |  2 |  1
          6 | b  |  1 |  2
          7 | d  |  4 |  4
          8 | d  |  4 |  3
(8 rows)

-- Brian: 1 specifies 2
--  
--
    select -- mvd 1 -> 2
        x,
        row_number() over (partition by x) as y,
        z 
    from (values (1,'A'),(1,'B'),(2,'C'),(2,'D')) r(x,z);
 x | y | z 
---+---+---
 1 | 1 | B
 1 | 2 | A
 2 | 1 | D
 2 | 2 | C
(4 rows)

-- start_ignore
--
-- whatever is here is ignored until we reach end_ignore
--
-- end_ignore
--
-- explain testing
--
set gp_segments_for_planner=4;
set optimizer_segments=4;
set gp_cost_hashjoin_chainwalk=on;
set optimizer_nestloop_factor = 1.0;
explain analyze select a.* from gpd1 as a, gpd1 as b where b.c1 in (select max(c1) from gpd1);
                                                                              QUERY PLAN                                                                              
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Hash Join  (cost=0.00..1724.00 rows=1 width=16)
   Hash Cond: public.gpd1.c1 = "inner".max
   Rows out:  16 rows with 32 ms to first row, 33 ms to end, start offset by 42 ms.
   Executor memory:  1K bytes.
   Work_mem used:  1K bytes. Workfile: (0 spilling, 0 reused)
   Hash chain length 1.0 avg, 1 max, using 1 of 262151 buckets.
   ->  Gather Motion 3:1  (slice2; segments: 3)  (cost=0.00..1293.00 rows=1 width=18)
         Rows out:  64 rows at destination with 0.037 ms to first row, 0.092 ms to end, start offset by 74 ms.
         ->  Nested Loop  (cost=0.00..1293.00 rows=1 width=18)
               Join Filter: true
               Rows out:  Avg 32.0 rows x 2 workers.  Max 32 rows (seg0) with 1.401 ms to first row, 1.511 ms to end, start offset by 66 ms.
               ->  Table Scan on gpd1  (cost=0.00..431.00 rows=1 width=16)
                     Rows out:  Avg 4.0 rows x 2 workers.  Max 4 rows (seg0) with 0.053 ms to first row, 0.057 ms to end, start offset by 67 ms.
               ->  Materialize  (cost=0.00..431.00 rows=2 width=2)
                     Rows out:  Avg 33.0 rows x 2 workers.  Max 33 rows (seg0) with 1.338 ms to first row, 1.348 ms to end of 5 scans, start offset by 67 ms.
                     ->  Broadcast Motion 3:3  (slice1; segments: 3)  (cost=0.00..431.00 rows=2 width=2)
                           Rows out:  Avg 8.0 rows x 2 workers at destination.  Max 8 rows (seg0) with 0.062 ms to first row, 1.210 ms to end, start offset by 66 ms.
                           ->  Table Scan on gpd1  (cost=0.00..431.00 rows=1 width=2)
                                 Rows out:  Avg 4.0 rows x 2 workers.  Max 4 rows (seg0) with 0.099 ms to first row, 0.102 ms to end, start offset by 67 ms.
   ->  Hash  (cost=431.00..431.00 rows=1 width=8)
         Rows in:  1 rows with 32 ms to end, start offset by 42 ms.
         ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
               Rows out:  1 rows with 32 ms to end, start offset by 42 ms.
               Executor memory:  8K bytes.
               ->  Gather Motion 3:1  (slice3; segments: 3)  (cost=0.00..431.00 rows=1 width=8)
                     Rows out:  2 rows at destination with 21 ms to first row, 32 ms to end, start offset by 42 ms.
                     ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                           Rows out:  Avg 1.0 rows x 2 workers.  Max 1 rows (seg0) with 0.074 ms to end, start offset by 63 ms.
                           Executor memory:  8K bytes avg, 8K bytes max (seg0).
                           ->  Table Scan on gpd1  (cost=0.00..431.00 rows=1 width=2)
                                 Rows out:  Avg 4.0 rows x 2 workers.  Max 4 rows (seg0) with 0.028 ms to first row, 0.034 ms to end, start offset by 63 ms.
 Slice statistics:
   (slice0)    Executor memory: 4355K bytes.  Work_mem: 1K bytes max.
   (slice1)    Executor memory: 255K bytes avg x 2 workers, 255K bytes max (seg0).
   (slice2)    Executor memory: 247K bytes avg x 2 workers, 247K bytes max (seg0).
   (slice3)    Executor memory: 239K bytes avg x 2 workers, 239K bytes max (seg0).
 Statement statistics:
   Memory used: 128000K bytes
 Settings:  gp_cost_hashjoin_chainwalk=on; gp_segments_for_planner=4; optimizer=on; optimizer_segments=4
 Total runtime: 75.143 ms
(40 rows)

explain select a.* from gpd1 as a, gpd1 as b where b.c1 in (select max(c1) from gpd1);
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Hash Join  (cost=0.00..1724.00 rows=1 width=16)
   Hash Cond: public.gpd1.c1 = "inner".max
   ->  Gather Motion 3:1  (slice2; segments: 3)  (cost=0.00..1293.00 rows=1 width=18)
         ->  Nested Loop  (cost=0.00..1293.00 rows=1 width=18)
               Join Filter: true
               ->  Table Scan on gpd1  (cost=0.00..431.00 rows=1 width=16)
               ->  Materialize  (cost=0.00..431.00 rows=2 width=2)
                     ->  Broadcast Motion 3:3  (slice1; segments: 3)  (cost=0.00..431.00 rows=2 width=2)
                           ->  Table Scan on gpd1  (cost=0.00..431.00 rows=1 width=2)
   ->  Hash  (cost=431.00..431.00 rows=1 width=8)
         ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
               ->  Gather Motion 3:1  (slice3; segments: 3)  (cost=0.00..431.00 rows=1 width=8)
                     ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                           ->  Table Scan on gpd1  (cost=0.00..431.00 rows=1 width=2)
 Settings:  gp_cost_hashjoin_chainwalk=on; gp_segments_for_planner=4; optimizer=on; optimizer_segments=4
(15 rows)

select a.* from gpd1 as a, gpd1 as b where b.c1 in (select max(c1) from gpd1);
 c1 | c2 | c3 
----+----+----
 a  |  1 |  1
 a  |  1 |  1
 a  |  1 |  2
 a  |  1 |  2
 c  |  3 |  2
 c  |  3 |  2
 c  |  2 |  3
 c  |  2 |  3
 b  |  2 |  1
 b  |  2 |  1
 b  |  1 |  2
 b  |  1 |  2
 d  |  4 |  4
 d  |  4 |  4
 d  |  4 |  3
 d  |  4 |  3
(16 rows)

set gp_segments_for_planner=40;
set optimizer_segments=40;
set optimizer_nestloop_factor = 1.0;
explain select a.* from gpd1 as a, gpd1 as b where b.c1 in (select max(c1) from gpd1);
                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice4; segments: 3)  (cost=0.00..1724.00 rows=1 width=16)
   ->  Hash Join  (cost=0.00..1724.00 rows=1 width=16)
         Hash Cond: "outer".max = public.gpd1.c1
         ->  Redistribute Motion 1:3  (slice2)  (cost=0.00..431.00 rows=1 width=8)
               Hash Key: max
               ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                     ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..431.00 rows=1 width=8)
                           ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                                 ->  Table Scan on gpd1  (cost=0.00..431.00 rows=1 width=2)
         ->  Hash  (cost=1293.00..1293.00 rows=1 width=18)
               ->  Nested Loop  (cost=0.00..1293.00 rows=1 width=18)
                     Join Filter: true
                     ->  Broadcast Motion 3:3  (slice3; segments: 3)  (cost=0.00..431.00 rows=20 width=16)
                           ->  Table Scan on gpd1  (cost=0.00..431.00 rows=1 width=16)
                     ->  Table Scan on gpd1  (cost=0.00..431.00 rows=1 width=2)
 Settings:  gp_cost_hashjoin_chainwalk=on; gp_segments_for_planner=40; optimizer=on; optimizer_segments=40
(16 rows)

select a.* from gpd1 as a, gpd1 as b where b.c1 in (select max(c1) from gpd1);
 c1 | c2 | c3 
----+----+----
 b  |  2 |  1
 b  |  2 |  1
 b  |  1 |  2
 b  |  1 |  2
 d  |  4 |  4
 d  |  4 |  4
 d  |  4 |  3
 d  |  4 |  3
 a  |  1 |  1
 a  |  1 |  1
 a  |  1 |  2
 a  |  1 |  2
 c  |  3 |  2
 c  |  3 |  2
 c  |  2 |  3
 c  |  2 |  3
(16 rows)

explain analyze select a.* from gpd1 as a, gpd1 as b where b.c1 in (select max(c1) from gpd1);
                                                                              QUERY PLAN                                                                              
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice4; segments: 3)  (cost=0.00..1724.00 rows=1 width=16)
   Rows out:  16 rows at destination with 37 ms to end, start offset by 2.113 ms.
   ->  Hash Join  (cost=0.00..1724.00 rows=1 width=16)
         Hash Cond: "outer".max = public.gpd1.c1
         Rows out:  16 rows (seg1) with 4.823 ms to first row, 6.909 ms to end, start offset by 32 ms.
         Executor memory:  2K bytes avg, 2K bytes max (seg0).
         Work_mem used:  2K bytes avg, 2K bytes max (seg0). Workfile: (0 spilling, 0 reused)
         (seg1)   Hash chain length 16.0 avg, 16 max, using 2 of 524341 buckets.
         ->  Redistribute Motion 1:3  (slice2)  (cost=0.00..431.00 rows=1 width=8)
               Hash Key: max
               Rows out:  1 rows at destination (seg1) with 0.011 ms to end, start offset by 37 ms.
               ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                     Rows out:  1 rows with 3.101 ms to end, start offset by 21 ms.
                     Executor memory:  8K bytes.
                     ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..431.00 rows=1 width=8)
                           Rows out:  2 rows at destination with 0.013 ms to first row, 3.088 ms to end, start offset by 21 ms.
                           ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                                 Rows out:  Avg 1.0 rows x 2 workers.  Max 1 rows (seg0) with 0.036 ms to end, start offset by 24 ms.
                                 Executor memory:  8K bytes avg, 8K bytes max (seg0).
                                 ->  Table Scan on gpd1  (cost=0.00..431.00 rows=1 width=2)
                                       Rows out:  Avg 4.0 rows x 2 workers.  Max 4 rows (seg0) with 0.021 ms to first row, 0.024 ms to end, start offset by 24 ms.
         ->  Hash  (cost=1293.00..1293.00 rows=1 width=18)
               Rows in:  Avg 32.0 rows x 2 workers.  Max 32 rows (seg0) with 7.497 ms to end, start offset by 30 ms.
               ->  Nested Loop  (cost=0.00..1293.00 rows=1 width=18)
                     Join Filter: true
                     Rows out:  Avg 32.0 rows x 2 workers.  Max 32 rows (seg0) with 0.045 ms to first row, 7.467 ms to end, start offset by 30 ms.
                     ->  Broadcast Motion 3:3  (slice3; segments: 3)  (cost=0.00..431.00 rows=20 width=16)
                           Rows out:  Avg 8.0 rows x 2 workers at destination.  Max 8 rows (seg0) with 0.013 ms to first row, 7.370 ms to end, start offset by 30 ms.
                           ->  Table Scan on gpd1  (cost=0.00..431.00 rows=1 width=16)
                                 Rows out:  Avg 4.0 rows x 2 workers.  Max 4 rows (seg0) with 0.020 ms to first row, 0.023 ms to end, start offset by 27 ms.
                     ->  Table Scan on gpd1  (cost=0.00..431.00 rows=1 width=2)
                           Rows out:  Avg 33.0 rows x 2 workers.  Max 33 rows (seg0) with 0.019 ms to first row, 0.061 ms to end of 9 scans, start offset by 37 ms.
 Slice statistics:
   (slice0)    Executor memory: 235K bytes.
   (slice1)    Executor memory: 239K bytes avg x 2 workers, 239K bytes max (seg0).
   (slice2)    Executor memory: 259K bytes (entry db).
   (slice3)    Executor memory: 255K bytes avg x 2 workers, 255K bytes max (seg0).
   (slice4)    Executor memory: 8456K bytes avg x 2 workers, 8456K bytes max (seg0).  Work_mem: 2K bytes max.
 Statement statistics:
   Memory used: 128000K bytes
 Settings:  gp_cost_hashjoin_chainwalk=on; gp_segments_for_planner=40; optimizer=on; optimizer_segments=40
 Total runtime: 39.966 ms
(42 rows)

--
-- Clean up
--
DROP TABLE  gpd1;
-- start_matchsubs
--
-- # create a match/subs expression to handle a value which always changes
--
-- # use zero-width negative look-behind assertion to match "gpmatchsubs1"
-- # that does not follow substring
--
-- m/(?<!substring..)gpmatchsubs1/
-- s/gpmatchsubs1.*/happy sub1/
--
-- m/(?<!substring..)gpmatchsubs2/
-- s/gpmatchsubs2.*/happy sub2/
--
-- end_matchsubs
-- substitute constant values for results
-- use substring because length of time string varies which changes output
select substring('gpmatchsubs1' || now(), 1,  25);
         substring         
---------------------------
 gpmatchsubs1Fri Aug 15 16
(1 row)

select substring('gpmatchsubs2' || now(), 1,  25);
         substring         
---------------------------
 gpmatchsubs2Fri Aug 15 16
(1 row)

-- start_matchignore
--
-- # create a match expression to handle a value which always changes
--
-- m/(?<!substring..)gpmatchignore1/
-- m/(?<!substring..)gpmatchignore2/
--
-- end_matchignore
-- just ignore the results
select substring('gpmatchignore1' || now(), 1,  25);
         substring         
---------------------------
 gpmatchignore1Fri Aug 15 
(1 row)

select substring('gpmatchignore2' || now(), 1,  25);
         substring         
---------------------------
 gpmatchignore2Fri Aug 15 
(1 row)

reset optimizer_nestloop_factor;
-- 
